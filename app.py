# app.py
import streamlit as st
import pandas as pd
import asyncio
from datetime import datetime

from db import init_db, load_all_lots
from export import export_to_excel_rus
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode

# ‚ö†Ô∏è –í–ê–ñ–ù–û: –≤ sync.py –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
from sync import run_incremental_parser, run_full_parser

# =============================
# –ö–æ–Ω—Ñ–∏–≥ / –≤–µ—Ä—Å–∏—è
# =============================
__version__ = "0.4.0"

st.set_page_config(page_title=f"–ü–∞—Ä—Å–µ—Ä –∑–∞–∫—É–ø–æ–∫ med.ecc.kz v{__version__}", layout="wide")
st.title(f"üì¶ –ü–∞—Ä—Å–µ—Ä –∑–∞–∫—É–ø–æ–∫ med.ecc.kz v{__version__}")

# =============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
# =============================
init_db()

# =============================
# –ö—ç—à –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
# =============================
@st.cache_data(ttl=300)
def get_data():
    df = load_all_lots()
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É
    df = df.sort_values(['date_end', 'ann_id'], ascending=[False, False])
    df = df.reset_index(drop=True)
    df.index += 1
    return df

# =============================
# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
# =============================
def filter_data(df, keyword, min_sum, date_limit, statuses, ls_list=None):
    # –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî –≤ title/description
    if keyword:
        df = df[
            df["title"].str.contains(keyword, case=False, na=False) |
            df["description"].str.contains(keyword, case=False, na=False)
        ]
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
    if min_sum and min_sum > 0:
        df = df[df["amount"] >= min_sum]
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if date_limit:
        df = df[pd.to_datetime(df["date_end"], errors="coerce") <= pd.to_datetime(date_limit)]
    # –°—Ç–∞—Ç—É—Å—ã
    if statuses:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –Ω–µ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        all_statuses = set(df["status"].dropna().unique().tolist())
        if set(statuses) != all_statuses:
            df = df[df["status"].isin(statuses)]
    # –ü–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫—É –õ–° (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ title/description)
    if ls_list:
        ls_list = [s.strip().lower() for s in ls_list if s and s.strip()]
        if len(ls_list) > 0:
            mask = df["title"].str.lower().apply(
                lambda x: any(s in (x or "") for s in ls_list)
            ) | df["description"].str.lower().apply(
                lambda x: any(s in (x or "") for s in ls_list)
            )
            df = df[mask]
    return df

# =============================
# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î (—Å–∞–π–¥–±–∞—Ä)
# =============================
with st.sidebar:
    st.header("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î")

    # –î–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    max_pages = st.number_input(
        "–ú–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)",
        min_value=1, max_value=5000, value=30, step=1
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ session_state
    if "confirm_full" not in st.session_state:
        st.session_state.confirm_full = False

    if st.button("–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–æ–±—Ä–∞—Ç—å –≤–µ—Å—å –∞—Ä—Ö–∏–≤)"):
        st.session_state.confirm_full = True

    if st.session_state.confirm_full:
        st.warning("‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–æ–±–µ—Ä—ë—Ç –≤–µ—Å—å –∞—Ä—Ö–∏–≤ —Å–∞–π—Ç–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
        col_ok, col_cancel = st.columns(2)
        with col_ok:
            if st.button("–î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å"):
                with st.spinner("–ò–¥—ë—Ç –ü–û–õ–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)..."):
                    # run_full_parser –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –∏–¥—ë–º –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    new_lots, log_path = asyncio.run(run_full_parser())
                    st.success(f"‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø–∏—Å–∞–Ω–æ –ª–æ—Ç–æ–≤: {len(new_lots)}")
                    st.info(f"–õ–æ–≥: {log_path}")
                st.cache_data.clear()
                st.session_state.confirm_full = False
        with col_cancel:
            if st.button("–û—Ç–º–µ–Ω–∞"):
                st.session_state.confirm_full = False

    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –ë–î (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)"):
        with st.spinner("–ò–¥—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)..."):
            # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å (new_lots, log_path)
            new_lots, log_path = asyncio.run(run_incremental_parser(max_pages))
            st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤: {len(new_lots)}")
            st.info(f"–õ–æ–≥: {log_path}")
        st.cache_data.clear()

    last_update = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    st.info(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}")

# =============================
# –§–∏–ª—å—Ç—Ä—ã (—Å–∞–π–¥–±–∞—Ä)
# =============================
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
keyword = st.sidebar.text_input("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
min_sum = st.sidebar.number_input("–ú–∏–Ω. —Å—É–º–º–∞", min_value=0, value=0)
date_limit = st.sidebar.date_input("–î–æ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=None)

# –ü–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫—É –õ–° –∏–∑ .txt
st.sidebar.header("üî¨ –ü–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫—É –õ–°")
ls_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –õ–°", type="txt")
ls_list = []
if ls_file is not None:
    ls_content = ls_file.read().decode("utf-8")
    ls_list = [line.strip() for line in ls_content.splitlines() if line.strip()]
    st.sidebar.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –õ–°: {len(ls_list)}")

# =============================
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
# =============================
data = get_data()
statuses_all = sorted(list(data["status"].dropna().unique()))
selected_statuses = st.sidebar.multiselect(
    "–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    options=statuses_all,
    default=statuses_all
)

filtered_data = filter_data(data, keyword, min_sum, date_limit, selected_statuses, ls_list)

# =============================
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∞ (—Ä—É—Å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
# =============================
cols_display = ["ann_id", "customer", "plan_point_id", "title", "description", "quantity", "amount", "status"]
display_df = filtered_data[cols_display].copy()
display_df.columns = [
    "–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
    "–ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –ø–ª–∞–Ω–∞",
    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞",
    "–ö—Ä–∞—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞",
    "–ö–æ–ª-–≤–æ",
    "–°—É–º–º–∞",
    "–°—Ç–∞—Ç—É—Å",
]
display_df.index.name = "‚Ññ"

# –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–∏–¥–∏–º—ã–º —Å—Ç–æ–ª–±—Ü–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
search_query = st.text_input("üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º")
df_filtered = display_df
if search_query:
    sq = search_query.lower()
    df_filtered = df_filtered[df_filtered.apply(
        lambda row: row.astype(str).str.lower().str.contains(sq).any(), axis=1
    )]

# =============================
# –õ–∏–º–∏—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–∞–∂–Ω–æ –¥–ª—è Streamlit Cloud 200MB)
# =============================
MAX_ROWS_TO_SHOW = 50000  # –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –¥–æ 10‚Äì20k –ø—Ä–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö
rows_total = len(df_filtered)
if rows_total > MAX_ROWS_TO_SHOW:
    st.warning(
        f"–ù–∞–π–¥–µ–Ω–æ {rows_total} –∑–∞–ø–∏—Å–µ–π. –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ {MAX_ROWS_TO_SHOW}. "
        f"–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å—ë —Ü–µ–ª–∏–∫–æ–º ‚Äî —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç –Ω–∏–∂–µ."
    )
    df_to_show = df_filtered.head(MAX_ROWS_TO_SHOW)
else:
    df_to_show = df_filtered

# =============================
# –¢–∞–±–ª–∏—Ü–∞ (AgGrid)
# =============================
st.subheader(f"üóÉÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ({rows_total} –∑–∞–ø–∏—Å–µ–π)")
gb = GridOptionsBuilder.from_dataframe(df_to_show)
gb.configure_default_column(wrapText=True, autoHeight=True)
gb.configure_selection("single", use_checkbox=True)
gb.configure_grid_options(domLayout='normal')
grid_options = gb.build()

grid_response = AgGrid(
    df_to_show,
    gridOptions=grid_options,
    update_mode=GridUpdateMode.SELECTION_CHANGED,
    allow_unsafe_jscode=True,
    fit_columns_on_grid_load=True,
    height=420,
)

# =============================
# –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞ (expander)
# =============================
selected_rows = grid_response['selected_rows']
if selected_rows is not None and len(selected_rows) > 0:
    # –í —Ç–≤–æ–µ–π —Å–≤—è–∑–∫–µ AgGrid => DataFrame
    selected_row = selected_rows.iloc[0]

    # –ë–µ—Ä—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –≤–∏–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    ann_id_val = selected_row['–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è']
    plan_point_id_val = selected_row['–ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –ø–ª–∞–Ω–∞']

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú filtered_data –ø–æ —Ç–µ—Ö. –ø–æ–ª—è–º
    details_df = filtered_data[
        (filtered_data["ann_id"] == ann_id_val) &
        (filtered_data["plan_point_id"] == plan_point_id_val)
    ]
    if not details_df.empty:
        row = details_df.iloc[0]

        # –†—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π (–ø–µ—Ä–≤—ã–º ‚Äî –°—Ç–∞—Ç—É—Å)
        field_names = {
            "status": "–°—Ç–∞—Ç—É—Å",
            "title": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞",
            "description": "–ö—Ä–∞—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞",
            "customer": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
            "item_type": "–í–∏–¥ –ø—Ä–µ–¥–º–µ—Ç–∞",
            "unit": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
            "quantity": "–ö–æ–ª-–≤–æ",
            "price": "–¶–µ–Ω–∞ –∑–∞ –µ–¥.",
            "amount": "–°—É–º–º–∞",
            "date_start": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
            "date_end": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
            "method": "–°–ø–æ—Å–æ–± –∑–∞–∫—É–ø–∫–∏",
            "plan_point_id": "–ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –ø–ª–∞–Ω–∞",
            "lot_id": "ID –ª–æ—Ç–∞",
            "ann_id": "–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        }
        fields_order = [
            "status",
            "title", "description", "customer",
            "item_type", "unit", "quantity", "price", "amount",
            "date_start", "date_end", "method",
            "plan_point_id", "lot_id", "ann_id",
        ]

        st.subheader("üìå –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞")
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–ª—è", expanded=True):
            for key in fields_order:
                if key in row.index and pd.notna(row[key]):
                    st.write(f"**{field_names.get(key, key)}:** {row[key]}")
    else:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ª–æ—Ç—É.")

# =============================
# –≠–∫—Å–ø–æ—Ä—Ç
# =============================
st.subheader("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
col1, col2 = st.columns(2)
with col1:
    if st.button("üì• –°–∫–∞—á–∞—Ç—å Excel (–≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)"):
        excel_file = export_to_excel_rus()
        with open(excel_file, "rb") as file:
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
                data=file,
                file_name=excel_file,
                mime="application/vnd.ms-excel"
            )
with col2:
    if st.button("üì• –°–∫–∞—á–∞—Ç—å CSV (–≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)"):
        csv_data = filtered_data.to_csv(index=False)
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
            data=csv_data,
            file_name="zakupki.csv",
            mime="text/csv"
        )
